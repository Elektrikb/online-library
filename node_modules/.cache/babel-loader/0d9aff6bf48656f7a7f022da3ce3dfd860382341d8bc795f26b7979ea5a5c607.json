{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst books = [{\n  id: 1,\n  title: 'Война и мир',\n  author: 'Лев Толстой',\n  cover: require('@/assets/book-covers/voyna-i-mir.jpg'),\n  description: 'Роман-эпопея, описывающий русское общество в эпоху войн против Наполеона.',\n  year: 1869,\n  pages: 1225,\n  genre: ['классика', 'исторический', 'роман'],\n  rating: 4.8\n}, {\n  id: 2,\n  title: 'Преступление и наказание',\n  author: 'Фёдор Достоевский',\n  cover: require('@/assets/book-covers/prestuplenie-i-nakazanie.jpg'),\n  description: 'Роман о моральных последствиях преступления, совершённого бедным студентом.',\n  year: 1866,\n  pages: 672,\n  genre: ['классика', 'психологический', 'философский'],\n  rating: 4.7\n}, {\n  id: 3,\n  title: 'Мастер и Маргарита',\n  author: 'Михаил Булгаков',\n  cover: require('@/assets/book-covers/master-i-margarita.jpg'),\n  description: 'Мистический роман, сочетающий сатиру на советскую действительность с философскими размышлениями.',\n  year: 1967,\n  pages: 384,\n  genre: ['классика', 'мистика', 'философский', 'роман'],\n  rating: 4.9\n}];\n\n// Автоматически собираем все жанры из книг\nconst allGenres = Array.from(new Set(books.flatMap(book => book.genre)));\nallGenres.unshift('все'); // Добавляем вариант \"все\" первым\n\nexport default {\n  getBooks() {\n    return books;\n  },\n  getBook(id) {\n    return books.find(book => book.id === parseInt(id));\n  },\n  getGenres() {\n    return allGenres;\n  },\n  searchBooks(query) {\n    const q = query.toLowerCase();\n    return books.filter(book => book.title.toLowerCase().includes(q) || book.author.toLowerCase().includes(q));\n  },\n  getBooksByGenre(genre) {\n    if (genre === 'все') return books;\n    return books.filter(book => book.genre.includes(genre));\n  }\n};","map":{"version":3,"names":["books","id","title","author","cover","require","description","year","pages","genre","rating","allGenres","Array","from","Set","flatMap","book","unshift","getBooks","getBook","find","parseInt","getGenres","searchBooks","query","q","toLowerCase","filter","includes","getBooksByGenre"],"sources":["F:/Pr/Frontend/online-library/src/store.js"],"sourcesContent":["const books = [\r\n  {\r\n    id: 1,\r\n    title: 'Война и мир',\r\n    author: 'Лев Толстой',\r\n    cover: require('@/assets/book-covers/voyna-i-mir.jpg'),\r\n    description: 'Роман-эпопея, описывающий русское общество в эпоху войн против Наполеона.',\r\n    year: 1869,\r\n    pages: 1225,\r\n    genre: ['классика', 'исторический', 'роман'],\r\n    rating: 4.8\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Преступление и наказание',\r\n    author: 'Фёдор Достоевский',\r\n    cover: require('@/assets/book-covers/prestuplenie-i-nakazanie.jpg'),\r\n    description: 'Роман о моральных последствиях преступления, совершённого бедным студентом.',\r\n    year: 1866,\r\n    pages: 672,\r\n    genre: ['классика', 'психологический', 'философский'],\r\n    rating: 4.7\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Мастер и Маргарита',\r\n    author: 'Михаил Булгаков',\r\n    cover: require('@/assets/book-covers/master-i-margarita.jpg'),\r\n    description: 'Мистический роман, сочетающий сатиру на советскую действительность с философскими размышлениями.',\r\n    year: 1967,\r\n    pages: 384,\r\n    genre: ['классика', 'мистика', 'философский', 'роман'],\r\n    rating: 4.9\r\n  }\r\n];\r\n\r\n// Автоматически собираем все жанры из книг\r\nconst allGenres = Array.from(\r\n  new Set(books.flatMap(book => book.genre))\r\n);\r\nallGenres.unshift('все'); // Добавляем вариант \"все\" первым\r\n\r\nexport default {\r\n  getBooks() {\r\n    return books;\r\n  },\r\n  getBook(id) {\r\n    return books.find(book => book.id === parseInt(id));\r\n  },\r\n  getGenres() {\r\n    return allGenres;\r\n  },\r\n  searchBooks(query) {\r\n    const q = query.toLowerCase();\r\n    return books.filter(book => \r\n      book.title.toLowerCase().includes(q) ||\r\n      book.author.toLowerCase().includes(q)\r\n    );\r\n  },\r\n  getBooksByGenre(genre) {\r\n    if (genre === 'все') return books;\r\n    return books.filter(book => book.genre.includes(genre));\r\n  }\r\n};"],"mappings":";;;;;;;AAAA,MAAMA,KAAK,GAAG,CACZ;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,aAAa;EACpBC,MAAM,EAAE,aAAa;EACrBC,KAAK,EAAEC,OAAO,CAAC,sCAAsC,CAAC;EACtDC,WAAW,EAAE,2EAA2E;EACxFC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,OAAO,CAAC;EAC5CC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,0BAA0B;EACjCC,MAAM,EAAE,mBAAmB;EAC3BC,KAAK,EAAEC,OAAO,CAAC,mDAAmD,CAAC;EACnEC,WAAW,EAAE,6EAA6E;EAC1FC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,CAAC,UAAU,EAAE,iBAAiB,EAAE,aAAa,CAAC;EACrDC,MAAM,EAAE;AACV,CAAC,EACD;EACET,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,oBAAoB;EAC3BC,MAAM,EAAE,iBAAiB;EACzBC,KAAK,EAAEC,OAAO,CAAC,6CAA6C,CAAC;EAC7DC,WAAW,EAAE,kGAAkG;EAC/GC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,CAAC;EACtDC,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAC1B,IAAIC,GAAG,CAACd,KAAK,CAACe,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACP,KAAK,CAAC,CAC3C,CAAC;AACDE,SAAS,CAACM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE1B,eAAe;EACbC,QAAQA,CAAA,EAAG;IACT,OAAOlB,KAAK;EACd,CAAC;EACDmB,OAAOA,CAAClB,EAAE,EAAE;IACV,OAAOD,KAAK,CAACoB,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACf,EAAE,KAAKoB,QAAQ,CAACpB,EAAE,CAAC,CAAC;EACrD,CAAC;EACDqB,SAASA,CAAA,EAAG;IACV,OAAOX,SAAS;EAClB,CAAC;EACDY,WAAWA,CAACC,KAAK,EAAE;IACjB,MAAMC,CAAC,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;IAC7B,OAAO1B,KAAK,CAAC2B,MAAM,CAACX,IAAI,IACtBA,IAAI,CAACd,KAAK,CAACwB,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,CAAC,CAAC,IACpCT,IAAI,CAACb,MAAM,CAACuB,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,CAAC,CACtC,CAAC;EACH,CAAC;EACDI,eAAeA,CAACpB,KAAK,EAAE;IACrB,IAAIA,KAAK,KAAK,KAAK,EAAE,OAAOT,KAAK;IACjC,OAAOA,KAAK,CAAC2B,MAAM,CAACX,IAAI,IAAIA,IAAI,CAACP,KAAK,CAACmB,QAAQ,CAACnB,KAAK,CAAC,CAAC;EACzD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}