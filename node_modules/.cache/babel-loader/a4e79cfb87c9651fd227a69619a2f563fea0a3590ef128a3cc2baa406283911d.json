{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect } from \"vue\";\nconst _hoisted_1 = {\n  class: \"book-search\"\n};\nconst _hoisted_2 = {\n  class: \"search-controls\"\n};\nconst _hoisted_3 = {\n  class: \"selectors-container\"\n};\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Поле поиска \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.searchQuery = $event),\n    type: \"text\",\n    placeholder: \"Поиск по названию или автору\",\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.handleSearch && $options.handleSearch(...args)),\n    class: \"search-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, _ctx.searchQuery]]), _createCommentVNode(\" Контейнер для селекторов \"), _createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Селектор жанра \"), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedGenre = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.handleGenreChange && $options.handleGenreChange(...args)),\n    class: \"genre-selector\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.genres, genre => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: genre,\n      value: genre\n    }, _toDisplayString(genre), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedGenre]]), _createCommentVNode(\" Селектор сортировки \"), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.selectedSort = $event),\n    onChange: _cache[5] || (_cache[5] = (...args) => _ctx.handleSortChange && _ctx.handleSortChange(...args)),\n    class: \"sort-selector\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"option\", {\n    value: \"title\"\n  }, \"По названию\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"author\"\n  }, \"По автору\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"year\"\n  }, \"По году (новые)\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"rating\"\n  }, \"По рейтингу\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedSort]])])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_ctx","searchQuery","$event","type","placeholder","onInput","_cache","args","$options","handleSearch","_hoisted_3","selectedGenre","onChange","handleGenreChange","_Fragment","_renderList","genres","genre","key","value","_hoisted_4","selectedSort","handleSortChange"],"sources":["F:\\Pr\\Frontend\\online-library\\src\\pages\\Home.vue"],"sourcesContent":["<!-- eslint-disable vue/multi-word-component-names -->\r\n<template>\r\n  <div class=\"book-search\">\r\n    <div class=\"search-controls\">\r\n      <!-- Поле поиска -->\r\n      <input\r\n        v-model=\"searchQuery\"\r\n        type=\"text\"\r\n        placeholder=\"Поиск по названию или автору\"\r\n        @input=\"handleSearch\"\r\n        class=\"search-input\"\r\n      >\r\n      \r\n      <!-- Контейнер для селекторов -->\r\n      <div class=\"selectors-container\">\r\n        <!-- Селектор жанра -->\r\n        <select \r\n          v-model=\"selectedGenre\" \r\n          @change=\"handleGenreChange\"\r\n          class=\"genre-selector\"\r\n        >\r\n          <option v-for=\"genre in genres\" :key=\"genre\" :value=\"genre\">\r\n            {{ genre }}\r\n          </option>\r\n        </select>\r\n        \r\n        <!-- Селектор сортировки -->\r\n        <select \r\n          v-model=\"selectedSort\" \r\n          @change=\"handleSortChange\"\r\n          class=\"sort-selector\"\r\n        >\r\n          <option value=\"title\">По названию</option>\r\n          <option value=\"author\">По автору</option>\r\n          <option value=\"year\">По году (новые)</option>\r\n          <option value=\"rating\">По рейтингу</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport store from '../store'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      allBooks: store.getBooks(),\r\n      filteredBooks: store.getBooks(),\r\n      currentSearch: '',\r\n      currentGenre: 'все'\r\n    }\r\n  },\r\n  methods: {\r\n    handleSearch(query) {\r\n      this.currentSearch = query\r\n      this.applyFilters()\r\n    },\r\n    handleGenreChange(genre) {\r\n      this.currentGenre = genre\r\n      this.applyFilters()\r\n    },\r\n    \r\n    applyFilters() {\r\n      let result = this.allBooks\r\n      \r\n      // Фильтр по жанру\r\n      if (this.currentGenre !== 'все') {\r\n        result = store.getBooksByGenre(this.currentGenre)\r\n      }\r\n      \r\n      // Фильтр по поиску\r\n      if (this.currentSearch) {\r\n        result = store.searchBooks(this.currentSearch).filter(book => \r\n          result.some(b => b.id === book.id))\r\n      }\r\n\r\n      this.filteredBooks.sort((a, b) => {\r\n        if (this.sortBy === 'title') return a.title.localeCompare(b.title)\r\n        if (this.sortBy === 'author') return a.author.localeCompare(b.author)\r\n        if (this.sortBy === 'year') return b.year - a.year\r\n        if (this.sortBy === 'rating') return b.rating - a.rating\r\n        return 0\r\n      })\r\n      \r\n      this.filteredBooks = result\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.books-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.no-results {\r\n  padding: 40px;\r\n  text-align: center;\r\n  color: #666;\r\n  font-size: 18px;\r\n}\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAa;;EACjBA,KAAK,EAAC;AAAiB;;EAWrBA,KAAK,EAAC;AAAqB;;;uBAZpCC,mBAAA,CAqCM,OArCNC,UAqCM,GApCJC,mBAAA,CAmCM,OAnCNC,UAmCM,GAlCJC,mBAAA,iBAAoB,E,gBACpBF,mBAAA,CAMC;+DALUG,IAAA,CAAAC,WAAW,GAAAC,MAAA;IACpBC,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC,8BAA8B;IACzCC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;IACpBb,KAAK,EAAC;iEAJGM,IAAA,CAAAC,WAAW,E,GAOtBF,mBAAA,8BAAiC,EACjCF,mBAAA,CAuBM,OAvBNa,UAuBM,GAtBJX,mBAAA,oBAAuB,E,gBACvBF,mBAAA,CAQS;+DAPEG,IAAA,CAAAW,aAAa,GAAAT,MAAA;IACrBU,QAAM,EAAAN,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAK,iBAAA,IAAAL,QAAA,CAAAK,iBAAA,IAAAN,IAAA,CAAiB;IAC1Bb,KAAK,EAAC;yBAENC,mBAAA,CAESmB,SAAA,QAAAC,WAAA,CAFef,IAAA,CAAAgB,MAAM,EAAfC,KAAK;yBAApBtB,mBAAA,CAES;MAFwBuB,GAAG,EAAED,KAAK;MAAGE,KAAK,EAAEF;wBAChDA,KAAK,wBAAAG,UAAA;2FALDpB,IAAA,CAAAW,aAAa,E,GASxBZ,mBAAA,yBAA4B,E,gBAC5BF,mBAAA,CASS;+DAREG,IAAA,CAAAqB,YAAY,GAAAnB,MAAA;IACpBU,QAAM,EAAAN,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,IAAA,CAAAsB,gBAAA,IAAAtB,IAAA,CAAAsB,gBAAA,IAAAf,IAAA,CAAgB;IACzBb,KAAK,EAAC;gCAENG,mBAAA,CAA0C;IAAlCsB,KAAK,EAAC;EAAO,GAAC,aAAW,qBACjCtB,mBAAA,CAAyC;IAAjCsB,KAAK,EAAC;EAAQ,GAAC,WAAS,qBAChCtB,mBAAA,CAA6C;IAArCsB,KAAK,EAAC;EAAM,GAAC,iBAAe,qBACpCtB,mBAAA,CAA2C;IAAnCsB,KAAK,EAAC;EAAQ,GAAC,aAAW,oB,2DAPzBnB,IAAA,CAAAqB,YAAY,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}